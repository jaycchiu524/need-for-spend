// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String
  password  String
  firstName String
  lastName  String
  role      Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items Item[]

  @@unique([email])
  @@map("users")
}

model Item {
  id                   String   @id @default(uuid())
  plaidAccessToken     String   @map("plaid_access_token")
  plaidItemId          String   @map("plaid_item_id")
  plaidInstitutionId   String   @map("plaid_institution_id")
  plaidInstitutionName String   @map("plaid_institution_name")
  transactionsCursor   String?  @map("transactions_cursor")
  userId               String   @map("user_id")
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  accounts Account[]

  @@unique([plaidItemId])
  @@map("items")
}

model Account {
  id                            String   @id @default(uuid())
  itemId                        String   @map("item_id") // Not Plaid Item ID
  item                          Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  plaidAccountId                String   @map("plaid_account_id") // Plaid Account ID
  name                          String   @map("name")
  type                          String   @map("type")
  subtype                       String?  @map("subtype")
  mask                          String?  @map("mask")
  officialName                  String?  @map("official_name")
  balanceAvailable              Float?   @map("balance_available")
  balanceCurrent                Float?   @map("balance_current")
  balanceLimit                  Float?   @map("balance_limit")
  balanceIsoCurrencyCode        String?  @map("balance_iso_currency_code")
  balanceUnofficialCurrencyCode String?  @map("balance_unofficial_currency_code")
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt

  transaction Transaction[]

  @@unique([plaidAccountId])
  @@map("accounts")
}

model Transaction {
  id                     String    @id @default(uuid())
  plaidTransactionId     String    @map("plaid_transaction_id") // Plaid Transaction ID
  accountId              String    @map("account_id") // Not Plaid Account ID
  account                Account   @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  date                   String    @map("date")
  address                String?   @map("address")
  name                   String?   @map("name")
  amount                 Float     @map("amount")
  isoCurrencyCode        String?   @map("iso_currency_code")
  unofficialCurrencyCode String?   @map("unofficial_currency_code")
  plaidCategoryId        String?   @map("plaid_category_id")
  category               Category? @relation(fields: [plaidCategoryId], references: [plaidCategoryId])
  pending                Boolean   @map("pending")
  accountOwner           String?   @map("account_owner")
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@unique([plaidTransactionId])
  @@map("transactions")
}

model Category {
  plaidCategoryId String   @id @map("plaid_category_id")
  name            String   @map("name")
  group           String   @map("group")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  transaction Transaction[]
  subcategories CategoriesOnSubcategories[]

  @@map("categories")
}

model Subcategory {
  name               String   @map("name")
  depth              Int      @map("depth")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  categories      CategoriesOnSubcategories[]
  @@id([name])
  @@map("subcategories")
}

model CategoriesOnSubcategories {
  plaidCategoryId    String   @map("plaid_category_id")
  category           Category @relation(fields: [plaidCategoryId], references: [plaidCategoryId], onDelete: Cascade, onUpdate: Cascade)
  subcategoryName    String   @map("subcategory_name")
  subcategory        Subcategory @relation(fields: [subcategoryName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@id([plaidCategoryId, subcategoryName])
  @@map("categories_on_sub_categories")
}